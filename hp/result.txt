Code [Func "makeTask" TTask [FuncParam "title" TString,FuncParam "description" TString,FuncParam "state" TState,FuncParam "tag" TTag] (FuncReturn (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskIdentifierDescription "description", state = TaskIdentifierState "state", members = TaskValueMembers (ListMember []), tag = TaskIdentifierTag "tag", subTasks = TaskValueSubTasks (ListTask [])})))),Func "isFinished" TBool [FuncParam "myTask" TTask] (FuncReturn (SBoolCondition (Condition {ifCondition = BoolComparison (ComparisonString (LTakeTaskAttribute (TakeTaskAttributeState "myTask")) Eq (LString (String "DONE"))), thenStatement = SBoolExp (BoolValue True), elseStatament = SBoolExp (BoolValue False)}))),Func "setDone" TTask [FuncParam "task" TTask] (FuncReturn (SValue (ValTask (Task {title = TaskTakeTitle "task", description = TaskTakeDescription "task", state = TaskValueState (StringId "DONE"), members = TaskTakeMembers "task", tag = TaskTakeTag "task", subTasks = TaskTakeSubTasks "task"})))),Func "setDoneTasks" TListTask [FuncParam "list" TListTask] (FuncReturn (SCycle (Cycle {mapF = "setDone", mapL = CycleId "list"}))),Func "taskFromName" TTask [FuncParam "title" TString] (FuncReturn (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String ""), state = TaskValueState (StringId "BACKLOG"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "TASK")), subTasks = TaskValueSubTasks (ListTask [])})))),Func "createTasks" TListTask [FuncParam "titles" TListString] (FuncReturn (SCycle (Cycle {mapF = "taskFromName", mapL = CycleId "titles"}))),Func "createTaskWithDescription" TTask [FuncParam "title" TString,FuncParam "state" TState,FuncParam "member" TMember] (FuncPattern [PatternCase [PatternCaseEmpty,PatternCaseValue (ValLiteral (LString (String "DONE"))),PatternCaseValue (ValLiteral (LString (String "No Assigned")))] (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "This task was already finished with NoAssigned member"), state = TaskValueState (StringId "DONE"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])}))),PatternCase [PatternCaseEmpty,PatternCaseValue (ValLiteral (LString (String "IN_PROGRESS"))),PatternCaseEmpty] (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "This task is being developed"), state = TaskValueState (StringId "IN PROGRESS"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])})))] (PatternDefault (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "Default description"), state = TaskIdentifierState "state", members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])}))))),Func "createScrumProject" TTask [FuncParam "projectTitle" TString,FuncParam "projectDescription" TString] (FuncReturn (SValue (ValTask (Task {title = TaskIdentifierTitle "projectTitle", description = TaskIdentifierDescription "projectDescription", state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "ProjectScrum")), subTasks = TaskValueSubTasks (ListTask [Task {title = TaskValueTitle (String "Sprint 1"), description = TaskValueDescription (String "First sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 2"), description = TaskValueDescription (String "Second sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 3"), description = TaskValueDescription (String "Third sprint of the project"), state = TaskValueState (StringId "NoAssigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])}])}))))] (DoNotation [DoAssignment "project" TTask (SFuncCall (FuncCall "createScrumProject" [FuncCallParamValue (ValLiteral (LString (String "My scrum project"))),FuncCallParamValue (ValLiteral (LString (String "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas")))])),DoPrint (PrintRef "project")])
SymbolTable (fromList [("BoolValue False",BoolExpressionInfo (BoolValue False)),("BoolValue True",BoolExpressionInfo (BoolValue True)),("ListMember []",ListInfo "ListMember []" (ListMember [])),("TaskIdentifierTitle \"projectTitle\"",TaskInfo "TaskIdentifierTitle \"projectTitle\"" (Task {title = TaskIdentifierTitle "projectTitle", description = TaskIdentifierDescription "projectDescription", state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "ProjectScrum")), subTasks = TaskValueSubTasks (ListTask [Task {title = TaskValueTitle (String "Sprint 1"), description = TaskValueDescription (String "First sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 2"), description = TaskValueDescription (String "Second sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 3"), description = TaskValueDescription (String "Third sprint of the project"), state = TaskValueState (StringId "NoAssigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])}])})),("TaskIdentifierTitle \"title\"",TaskInfo "TaskIdentifierTitle \"title\"" (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "Default description"), state = TaskIdentifierState "state", members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])})),("TaskTakeTitle \"task\"",TaskInfo "TaskTakeTitle \"task\"" (Task {title = TaskTakeTitle "task", description = TaskTakeDescription "task", state = TaskValueState (StringId "DONE"), members = TaskTakeMembers "task", tag = TaskTakeTag "task", subTasks = TaskTakeSubTasks "task"})),("TaskValueTitle (String \"Sprint 1\")",TaskInfo "TaskValueTitle (String \"Sprint 1\")" (Task {title = TaskValueTitle (String "Sprint 1"), description = TaskValueDescription (String "First sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])})),("TaskValueTitle (String \"Sprint 2\")",TaskInfo "TaskValueTitle (String \"Sprint 2\")" (Task {title = TaskValueTitle (String "Sprint 2"), description = TaskValueDescription (String "Second sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])})),("TaskValueTitle (String \"Sprint 3\")",TaskInfo "TaskValueTitle (String \"Sprint 3\")" (Task {title = TaskValueTitle (String "Sprint 3"), description = TaskValueDescription (String "Third sprint of the project"), state = TaskValueState (StringId "NoAssigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])})),("[Task {title = TaskValueTitle (String \"Sprint 1\"), description = TaskValueDescription (String \"First sprint of the project\"), state = TaskValueState (StringId \"No Assigned\"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId \"Sprint\")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String \"Sprint 2\"), description = TaskValueDescription (String \"Second sprint of the project\"), state = TaskValueState (StringId \"No Assigned\"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId \"Sprint\")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String \"Sprint 3\"), description = TaskValueDescription (String \"Third sprint of the project\"), state = TaskValueState (StringId \"NoAssigned\"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId \"Sprint\")), subTasks = TaskValueSubTasks (ListTask [])}]",ListInfo "[Task {title = TaskValueTitle (String \"Sprint 1\"), description = TaskValueDescription (String \"First sprint of the project\"), state = TaskValueState (StringId \"No Assigned\"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId \"Sprint\")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String \"Sprint 2\"), description = TaskValueDescription (String \"Second sprint of the project\"), state = TaskValueState (StringId \"No Assigned\"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId \"Sprint\")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String \"Sprint 3\"), description = TaskValueDescription (String \"Third sprint of the project\"), state = TaskValueState (StringId \"NoAssigned\"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId \"Sprint\")), subTasks = TaskValueSubTasks (ListTask [])}]" (ListTask [Task {title = TaskValueTitle (String "Sprint 1"), description = TaskValueDescription (String "First sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 2"), description = TaskValueDescription (String "Second sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 3"), description = TaskValueDescription (String "Third sprint of the project"), state = TaskValueState (StringId "NoAssigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])}])),("[]",ListInfo "[]" (ListTask [])),("createScrumProject",FunctionInfo "createScrumProject" TTask [FuncParam "projectTitle" TString,FuncParam "projectDescription" TString] (FuncReturn (SValue (ValTask (Task {title = TaskIdentifierTitle "projectTitle", description = TaskIdentifierDescription "projectDescription", state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "ProjectScrum")), subTasks = TaskValueSubTasks (ListTask [Task {title = TaskValueTitle (String "Sprint 1"), description = TaskValueDescription (String "First sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 2"), description = TaskValueDescription (String "Second sprint of the project"), state = TaskValueState (StringId "No Assigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])},Task {title = TaskValueTitle (String "Sprint 3"), description = TaskValueDescription (String "Third sprint of the project"), state = TaskValueState (StringId "NoAssigned"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "Sprint")), subTasks = TaskValueSubTasks (ListTask [])}])}))))),("createTaskWithDescription",FunctionInfo "createTaskWithDescription" TTask [FuncParam "title" TString,FuncParam "state" TState,FuncParam "member" TMember] (FuncPattern [PatternCase [PatternCaseEmpty,PatternCaseValue (ValLiteral (LString (String "DONE"))),PatternCaseValue (ValLiteral (LString (String "No Assigned")))] (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "This task was already finished with NoAssigned member"), state = TaskValueState (StringId "DONE"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])}))),PatternCase [PatternCaseEmpty,PatternCaseValue (ValLiteral (LString (String "IN_PROGRESS"))),PatternCaseEmpty] (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "This task is being developed"), state = TaskValueState (StringId "IN PROGRESS"), members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])})))] (PatternDefault (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskValueDescription (String "Default description"), state = TaskIdentifierState "state", members = TaskValueMembers (ListMember []), tag = TaskValueTag (Tag (StringId "DefaultTag")), subTasks = TaskValueSubTasks (ListTask [])})))))),("createTasks",FunctionInfo "createTasks" TListTask [FuncParam "titles" TListString] (FuncReturn (SCycle (Cycle {mapF = "taskFromName", mapL = CycleId "titles"})))),("isFinished",FunctionInfo "isFinished" TBool [FuncParam "myTask" TTask] (FuncReturn (SBoolCondition (Condition {ifCondition = BoolComparison (ComparisonString (LTakeTaskAttribute (TakeTaskAttributeState "myTask")) Eq (LString (String "DONE"))), thenStatement = SBoolExp (BoolValue True), elseStatament = SBoolExp (BoolValue False)})))),("list",VariableInfo "list" TListString Nothing),("makeTask",FunctionInfo "makeTask" TTask [FuncParam "title" TString,FuncParam "description" TString,FuncParam "state" TState,FuncParam "tag" TTag] (FuncReturn (SValue (ValTask (Task {title = TaskIdentifierTitle "title", description = TaskIdentifierDescription "description", state = TaskIdentifierState "state", members = TaskValueMembers (ListMember []), tag = TaskIdentifierTag "tag", subTasks = TaskValueSubTasks (ListTask [])}))))),("project",DoAssignmentInfo "project" TTask (SFuncCall (FuncCall "createScrumProject" [FuncCallParamValue (ValLiteral (LString (String "My scrum project"))),FuncCallParamValue (ValLiteral (LString (String "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas")))]))),("setDone",DoAssignmentInfo "setDone" TListString (SCycle (Cycle {mapF = "setDone", mapL = CycleId "list"}))),("setDoneTasks",FunctionInfo "setDoneTasks" TListTask [FuncParam "list" TListTask] (FuncReturn (SCycle (Cycle {mapF = "setDone", mapL = CycleId "list"})))),("taskFromName",DoAssignmentInfo "taskFromName" TListString (SCycle (Cycle {mapF = "taskFromName", mapL = CycleId "titles"}))),("titles",VariableInfo "titles" TListString Nothing)])
