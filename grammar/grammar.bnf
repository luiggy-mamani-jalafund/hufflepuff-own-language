<identifier> ::= {<alphanumeric> | <digit>}
<string> ::= <string-identifier> 
    | <string-identifier-with-space> 
    | <string-paragraph> 
<string-identifier> ::= '"' <identifier> '"'
<string-identifier-with-space> ::= '"' {<alphanumeric> | <digit> | <space>} '"'
<string-paragraph> ::= '"' {<alphanumeric> | <digit> | <space> | <paragraph-symbol>} '"'
<paragraph-symbol> ::= '.' | ',' | ';'

<value>
    ::= <string>
    | <bool> 
    | <task> 
    | <tag>
    | <member>
    | <list>

<type>
    ::= 'StringId' 
    | 'StringIdSpace' 
    | 'StringParagraph' 
    | 'State' 
    | 'Bool' 
    | 'Member' 
    | 'Tag' 
    | 'List'

<state> ::= <string-identifier>
<bool> ::= 'True' | 'False'
<boolean-expression> ::= <boolean-term> | <boolean-comparisison>
<boolean-comparisison> ::= <boolean-term> <bool-comparisison> <boolean-term>
<boolean-term> ::= <bool> | <function-call> | <value> | <take-take-attribute>
<bool-comparisison> ::= '==' | '!=' | '<' | '<=' | '>' | '>=' | '&&' | '||'

<task> ::= 'Task {'
                'title:' <string-identifier-with-space> ','
                'description:' <string-paragraph> ','
                'state:' <state> ','
                'member:' <member> ','
                'tag:' <tag> ','
                'subTasks ': <list>
            '}'

<task-attributes> 
    ::= 'title'
    | 'description'
    | 'state'
    | 'member'
    | 'tag'
    | 'subTasks'
    
<take-task-attribute> ::= <identifier> "." <task-attributes>

<tag> ::= <string-identifier> | 'NoTag'

<member> ::= 'Member [{' 
                'name:' <string-identifier-with-space> ','
                'role:' <string-identifier>
            '}]' 
            | 'NoAssigned'

<list> ::= <list-string>
         | <list-bool>
         | <list-task>
         | <list-tag>
         | <list-member>

<list-type> ::= 'List' ':' <type>

<list-string> ::= <list-type> '[' <string> {',' <string>} ']'
<list-bool> ::= <list-type> '[' <bool> {',' <bool>} ']'
<list-task> ::= <list-type> '[' <task> {',' <task>} ']'
<list-tag> ::= <list-type> '[' <tag> {',' <tag>} ']'
<list-member> ::= <list-type> '[' <member> {',' <member>} ']'
<list-list> ::= <list-type> '[' <list> {',' <list>} ']'

<function> ::= 'func' <identifier> '->' <type> 
        '{' 
            'params {' [<params>] '}' 
            <function-body>
        '}'

<function-body> ::= <return-function> | <pattern-function>

<return-function> ::= 'return' '{' <statement> '}'

<patten-function> ::= 'pattern {' <pattern-body> '}'

<pattern-body> ::= [<pattern-case>] <pattern-default>

<pattern-case> ::= 'case' '(' <pattern-case-values> ')' '{' <statement> '}'

<pattern-default> ::= 'default' '{' <statement> '}'

<pattern-case-values> ::= <pattern-case-value> {',' <pattern-case-value>}

<pattern-case-value> ::= '_' | <value>

<params> ::= <param> {',' <param>}

<param> ::= <identifier> ':' <type>

<statement> 
    ::= <function-call> 
    | <value>
    | <take-task-attribute>
    | <condition-statement> 
    | <cycle-statement>

<function-call> ::= <identifier> '(' <function-call-params> ')'

<function-call-params> ::= <function-call-value> {',' <function-call-value>}

<function-call-value> ::= <value> | <function-call>

<condition-statement> 
    ::= 'if' '(' <boolean-expression> ')' 'then' <statement> 'else' <statement>

<cycle-statement> ::= 'map' '(' <function-ref> ',' <list> ')' 

<function-ref> ::= <identifier>

<code> ::= {<function>} <do-statement>

<do-statement> ::= 'do' '{' <function-call> '}'