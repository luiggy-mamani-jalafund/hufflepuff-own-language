// code ->
// |
// |
// <function> ->
// 'func' <identifier> '->' <type>
//         |                 |
//         |__makeTask       |__Task
// '{' 
//     'params {' [<params>] '}' 
//                 |
//                 |__<param> ','
//                 |     |                    |
//                 |     |__<identifier> ':'  |__<type>
//                 |         |                   |
//                 |         |__ title           |__ StringIdSpace
//                 |__<param> ','
//                    
//     <function-body>
//      |
//      |__<return-function>
//          |
//          |__'return' '{' <statement> '}'
//                           |
//                           |__<value>
//                               |
//                               |__<task>
//                                   |
//                                   |__Task
// '}'
func makeTask -> Task {
    params {
        title: StringIdSpace,
        description: StringParagraph,
        state: State,
        tag: Tag
    }
    return {
        Task {
            title: title,
            description: description,
            state: state,
            members: List:Member [],
            tag: tag,
            subTasks: List:Task []
        }
    }
}

func isFinished -> Bool {
    params {
        myTask: Task
    }
    return {
        if (myTask.state == "DONE") then True
        else False
    }
}

func setDone -> Task {
    params {
        task: Task
    }
    return {
        Task {
            title: task.title,
            description: task.description,
            state: "DONE",
            members: task.members,
            tag: task.tag,
            subTasks: task.subTasks
        }
    }
}

func setDoneTasks -> List:Task {
    params {
        list: List:Task
    }
    return {
        map(setDone, list)
    }
}

func taskFromName -> Task {
    params {
        title: StringIdSpace,
    }
    return {
        Task {
            title: title,
            description: "",
            state: "BACKLOG",
            members: List:Member [],
            tag: "TASK",
            subTasks: List:Task []
        }
    }
}

func createTasks -> List:Task {
    params {
        titles: List:StringIdSpace,
    }
    return {
        map (taskFromName, titles)
    }
}

func createTaskWithDescription -> Task {
    params {
        title: StringIdSpace,
        state: State,
        member: Member
    }
    pattern {
        case (_, "DONE", "NoAssigned") {
            Task {
                title: title,
                description: "This task was already finished with NoAssigned member",
                state: "DONE",
                members: List:Member [member],
                tag: "DefaultTag",
                subTasks: List:Task []
            }
        }
        case (_, "IN_PROGRESS", _) {
            Task {
                title: title,
                description: "This task is being developed",
                state: "IN_PROGRESS",
                members: List:Member [member],
                tag: "DefaultTag",
                subTasks: List:Task []
            }
        }
        default {
            Task {
                title: title,
                description: "Default description",
                state: state,
                members: List:Member [member],
                tag: "DefaultTag",
                subTasks: List:Task []
            }
        }
    }
}

func createScrumProject -> Task {
    params {
        projectTitle: StringIdSpace,
        projectDescription: StringParagraph
    }
    return {
        Task {
            title: projectTitle,
            description: projectDescription,
            state: "NoAssigned",
            members: List:Member [],
            tag: "ProjectScrum",
            subTasks: List:Task [
                Task {
                    title: "Subtask 1",
                    description: "Description for subtask 1",
                    state: "NoAssigned",
                    members: List:Member [],
                    tag: "SubtaskTag",
                    subTasks: List:Task []
                },
                Task {
                    title: "Subtask 2",
                    description: "Description for subtask 2",
                    state: "NoAssigned",
                    members: List:Member [],
                    tag: "SubtaskTag",
                    subTasks: List:Task []
                }
            ]
        }
    }
}

func createScrumProject -> Task {
    params {
        projectTitle: StringIdSpace,
        projectDescription: StringParagraph
    }
    return {
        Task {
            title: projectTitle,
            description: projectDescription,
            state: "NoAssigned",
            members: List:Member [],
            tag: "ProjectScrum",
            subTasks: List:Task [
                Task {
                    title: "Sprint 1",
                    description: "First sprint of the project",
                    state: "NoAssigned",
                    members: List:Member [],
                    tag: "Sprint",
                    subTasks: List:Task []
                },
                Task {
                    title: "Sprint 2",
                    description: "Second sprint of the project",
                    state: "NoAssigned",
                    members: List:Member [],
                    tag: "Sprint",
                    subTasks: List:Task []
                },
                Task {
                    title: "Sprint 3",
                    description: "Third sprint of the project",
                    state: "NoAssigned",
                    members: List:Member [],
                    tag: "Sprint",
                    subTasks: List:Task []
                }
            ]
        }
    }
}

do {
    createScrumProject(
        "My scrum project",
        "Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime mollitia, molestiae quas"
    )
}